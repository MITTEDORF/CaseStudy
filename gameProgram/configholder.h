//=============================================================================
//
// 設定情報管理クラス [configholder.h]
// Author :YUKI SAKAMOTO
//
//=============================================================================
#ifndef _CONFIG_HOLDER_H
#define _CONFIG_HOLDER_H
//=============================================================================
// インクルードファイル
//=============================================================================
#include "main.h"

//=============================================================================
// マクロ
//=============================================================================
//ステージ
typedef enum
{
	// コスチュームID
	CONFIG_COSTUME = 0,
	// アッシーID
	CONFIG_ASSY,
	// ステージID
	CONFIG_STAGE,
	
	//設定情報の数
	CONFIG_MAX

} CONFIG_ID;
//=============================================================================
// 構造体宣言
//=============================================================================

//=============================================================================
// クラス宣言
//=============================================================================
class CConfigHolder
{
public:
	CConfigHolder(){NullSetVariable();};
	~CConfigHolder(){};

	//設定情報のセット
	//第一引数:どの設定情報かのID
	//第二引数:入れる値
	static void Set(CONFIG_ID id,int value);

	//設定情報のゲット
	//第一引数:どの設定情報かのID
	//戻り値:設定情報の中身
	static int Get(CONFIG_ID id);

private:
	static int Config[CONFIG_MAX];

	//初期値のセット
	void NullSetVariable()
	{
		for(int i=0;i<CONFIG_MAX;i++)
		{
			Config[i]=0;
		}
	}
};
#endif
