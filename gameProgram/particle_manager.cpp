//*****************************************************************************
//
// パーティクル管理クラス [particle_manager.cpp]
// Author :YUKI SAKAMOTO
//
//*****************************************************************************

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルードファイル
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "particle_manager.h"

//=============================================================================
// マクロ
//============================================================================

//=============================================================================
// 構造体宣言
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CParticleManager::CParticleManager()
{

}
//=============================================================================
// デストラクタ
//=============================================================================
CParticleManager::~CParticleManager()
{

}
//=============================================================================
// 初期化
//=============================================================================
void CParticleManager::Init(LPDIRECT3DDEVICE9 device)
{
	coolDownTinme=0;
	for(int i=0;i<PARTICLE_MAX-1;i++)
	{
		object[i]=CParticleObject::Create(device);
	}
}
//=============================================================================
// パーティクルの生成開始
//=============================================================================
void CParticleManager::Start(CScene* target)
{
	if(coolDownTinme==0)
	{
		for(int i=0;i<PARTICLE_MAX-1;i++)
		{
			if(!object[i]->isLive())
			{
				object[i]->Start(m_pos,target);
				coolDownTinme++;
				return;
			}
		}
	}
}

void CParticleManager::StartBurst(CScene* target)
{
	for(int i=0;i<PARTICLE_MAX-1;i++)
		{
			if(!object[i]->isLive())
			{
				object[i]->Start(m_pos,target);
			}
		}
}
//=============================================================================
// 全パーティクルの停止
//=============================================================================
void CParticleManager::StopALL()
{
	for(int i=0;i<PARTICLE_MAX-1;i++)
	{
		object[i]->Destroy();
	}
}

//=============================================================================
// 生成位置のセット
//=============================================================================
void CParticleManager::Setpos(D3DXVECTOR2 pos)
{
	m_pos=pos;

	for(int i=0;i<PARTICLE_MAX-1;i++)
	{
		if(object[i]->isLive())
		{
			object[i]->SetPos(m_pos);
		}
	}

	if(coolDownTinme!=0)
	{
		coolDownTinme++;
		if(coolDownTinme>=PARTICLE_COOL_DOWN_TIME)
		{
			coolDownTinme=0;
		}
	}
}
